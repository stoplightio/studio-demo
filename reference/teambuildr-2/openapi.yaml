openapi: 3.0.1
info:
  title: TeamBuildr
  version: 3.0.0
  contact:
    name: TeamBuildr Dev
    email: dev@teambuildr.com
  termsOfService: 'https://www.teambuildr.com/terms-of-use'
  description: TeamBuildr API
paths:
  /me:
    description: Endpoints related to the currently logged in user.
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: success response
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getMe
      description: Return details relating to currently logged in user
      summary: Get Current User Details
      tags:
        - User Profile
  '/me/accounts/{accountCode}/exercises/{exerciseId}/maxes':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Return a single MaxEffort object for the exercise with the history list filled with all max efforts the user has recorded for the exercise.
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getMeExerciseMaxEffortHistory
      summary: "Lift of Current User's Max/PR Entries for Exercise"
      description: Return a list of maxes/prs for an exercise for the currently logged in user
      tags:
        - Maxes/PRs
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxEffortCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a new MaxEffort with the history filled in that includes the newly submitted value.
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: createMeMaxEffort
      description: Create a max/pr entry for an exercise for currently logged in user and exercise
      summary: Create a Max/PR Entry for Current User
      tags:
        - Maxes/PRs
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
  '/me/accounts/{accountCode}/exercises/maxes':
    get:
      parameters:
        - name: type
          description: Allows fitering for one or more types of exercises to be returned in the list.
          schema:
            type: array
            items:
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MaxEffort'
          description: Returns a list of maximum efforts for each exercise the user has an effort recorded.
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getMeMaxEfforts
      description: Return a list of all active maxes/prs for the currently logged in user
      summary: "List of All Current User's Current Maxes/PRs"
      tags:
        - Maxes/PRs
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
  '/me/accounts/{accountCode}/exercises/{exerciseId}/maxes/{maxId}/active':
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a MaxEffort object with the history filled in reflecting the new current max effort.
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: setMeMaxEffortActive
      summary: "Set Current Athlete's Max/PR Record as Active Max for Exercise"
      description: Set specific max/pr record within an exercise as the active/working max for the currently logged in athlete.
      tags:
        - Maxes/PRs
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
      - name: maxId
        schema:
          type: integer
        in: path
        required: true
  '/me/accounts/{accountCode}/exercises/{exerciseId}/maxes/reset':
    description: Resets all maximum efforts to not be marked as locked or current max effort for the user + exercise combination.
    put:
      responses:
        '204':
          description: Indicates the MaxEfforts have been reset succesfully.
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: resetMeExerciseMaxEfforts
      summary: "Reset Current Athlete's Max/PR Records for Exercise"
      description: Resets all max/pr records associated with a specific exercise for the currently logged inn athlete. This will keep the data in their history but remove the active/working max.
      tags:
        - Maxes/PRs
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/exercises':
    get:
      parameters:
        - name: tracked
          description: Filter to only show exercises that are marked as tracked.
          schema:
            type: boolean
          in: query
        - name: similarTo
          description: An exercise id value telling the API to return a list of exercises that have been marked as similar to the passed id.
          schema:
            type: integer
          in: query
        - name: tagId
          description: Filter the list of exercises returned so only exercises marked with the tagId are returned.
          schema:
            type: integer
          in: query
          required: false
        - name: type
          description: Only return exercises matching the passed type.
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExerciseMin'
          description: success
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getAccountExercises
      summary: List Exercises
      description: List all exercises
      tags:
        - Exercises
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/exercises/{exerciseId}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseDetail'
          description: success
        '404':
          description: not found
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getAccountExerciseDetail
      summary: Get an Exercise
      description: Get the details of an exercise
      tags:
        - Exercises
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/exercises/{exerciseId}/leaderboard':
    get:
      parameters:
        - name: groupsIds
          description: Filter list of RankPosition returned by the groupIds passed.
          schema:
            type: array
            items:
              type: integer
          in: query
        - name: mustBeInAllGroups
          description: If set to true the leaderboard list is limited to users in all the passed groupIds. The default is false.
          schema:
            type: boolean
          in: query
        - name: page
          schema:
            type: integer
          in: query
          required: true
        - name: pageSize
          schema:
            type: integer
          in: query
          required: true
        - name: gender
          description: |-
            1 - Male
            2 - Female
          schema:
            type: integer
          in: query
        - name: rangeType
          description: |-
            An integer indicating the leaderboard should be limited to a specific date range:
              - 1: Leaderboards for all-time
              - 2: Leaderboards for past 30 days
              - 3: Leaderboards for today
              - 4: Leaderboards between rangeMinDate / rangeMaxDate

            All other values are ignored.
          schema:
            type: integer
          in: query
        - name: compareTo
          description: |-
            Indicates if a comparison should be included:
            - 1: Compare to all-time max
            - 2: Compare to max within last 30 days
            - 3: Compare to max within last 7 days
            - 4: Compare to specified compareMinDate / compareMaxDate query params
          schema:
            type: integer
          in: query
        - name: compareMinDate
          schema:
            format: date
            type: string
          in: query
        - name: compareMaxDate
          schema:
            format: date
            type: string
          in: query
        - name: rangeMinDate
          schema:
            format: date
            type: string
          in: query
        - name: rangeMaxDate
          schema:
            format: date
            type: string
          in: query
        - name: format
          description: 'If set to `csv` will return ALL leaderboard rows as a CSV file. Only include Rank, Name, Value, Date, Change. See current download as example of what to include.'
          schema: {}
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RankPosition'
          description: success
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getExerciseLeaderboard
      summary: Get a Leaderboard
      description: Get a leaderboard for a specfic exercise
      tags:
        - Leaderboard
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
  '/me/accounts/{accountCode}/exercises/{exerciseId}/maxes/{maxId}/archive':
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a MaxEffort object with the history filled in reflecting the new current max effort.
      security:
        - OAuth: []
      operationId: setMeMaxEffortArchived
      summary: "Archive Current Athlete's Max/PR Record for Exercise"
      description: Set specific max/pr record within an exercise as the active/working max for the currently logged in athlete
      tags:
        - Maxes/PRs
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
      - name: maxId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/documents':
    get:
      parameters:
        - name: folderId
          description: Filer document list by parent folder id
          schema:
            format: integer
            type: integer
          in: query
          required: false
        - name: search
          description: Search for document by name
          schema:
            format: string
            type: string
          in: query
          required: false
        - name: type
          description: 'Filter document by type (0 = Folder, 1 = Document, 2 = Link, 3 = Documents & Links)'
          schema:
            format: integer
            type: integer
          in: query
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
          description: success
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getDocuments
      description: List all documents
      summary: List Documents
      tags:
        - Documents
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: Returns a new document with the that includes the newly submitted value.
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: createDocument
      summary: Create a Document
      description: 'Create a document, link or folder'
      tags:
        - Documents
    parameters:
      - name: accountCode
        schema:
          format: integer
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/documents/{documentId}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: success
        '404':
          description: not found
      security:
        - OAuth:
            - 'urn:teambuildr:me'
      operationId: getAccountDocumentDetail
      summary: Get a Document
      description: Get the details of a document
      tags:
        - Documents
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: success
      security:
        - OAuth:
            - 'urn:teambuildr:admin'
            - 'urn:teambuildr:coach'
      operationId: updateDocument
      description: 'Update an existing document, link or folder'
      summary: Update a Document
      tags:
        - Documents
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: documentId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/documents/upload':
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUpload'
          description: success
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: uploadDocument
      summary: Upload a Document
      description: Upload a document to be used when creating a document item
      tags:
        - Documents
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
  /me/profileimage:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  format: binary
                  type: string
        required: true
      responses:
        '200':
          content:
            application/json: {}
          description: success
      operationId: uploadProfileImage
      summary: Upload Profile Picture
      description: Update profile picture for the currently logged in user
      tags:
        - User Profile
  '/accounts/{accountCode}/users':
    get:
      parameters:
        - name: page
          description: the page index to return
          schema:
            type: integer
          in: query
          required: false
        - name: pageSize
          description: the maximum number of users to return per page
          schema:
            type: integer
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserMin'
          description: a list of users
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
      operationId: getUsers
      description: Return a list of users with pagination
      summary: List of Users
      tags:
        - Users
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/users/{userId}':
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: the user
      security:
        - OAuth:
            - 'urn:teambuildr:admin'
      operationId: getUserDetail
      description: Get the details for a specific user
      summary: Get a User
      tags:
        - Users
    parameters:
      - name: accountCode
        description: unique id of the user being retrieved
        schema:
          type: integer
        in: path
        required: true
      - name: userId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/users/{userId}/exercises/{exerciseId}/maxes':
    description: This endpoint is only available to admin and coach users and will only allow requests for athletes the requestor has permission to view.
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a MaxEffort object with included MaxHistoricalEffot list for the requested user and exercise.
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: getUserExerciseMaxEffortHistory
      summary: "Lift of User's Max/PR Entries for Exercise"
      description: Get a list of maxes/prs for a specific user and exercise
      tags:
        - Maxes/PRs
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaxEffortCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a new MaxEffort with the history filled in that includes the newly submitted value.
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: createUserExerciseMaxEffort
      summary: Create a Max/PR Entry for User
      description: Create a max/pr entry for specific user and exercise
      tags:
        - Maxes/PRs
    parameters:
      - name: userId
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/users/{userId}/exercises/{exerciseId}/maxes/{maxId}/active':
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a MaxEffort object with the history filled in reflecting the new current max effort.
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: setUserMaxEffortActive
      summary: "Set Athlete's Max/PR Record as Active Max for Exercise"
      description: Set specific max/pr record within an exercise as the active/working max for an athlete.
      tags:
        - Maxes/PRs
    parameters:
      - name: userId
        schema:
          type: integer
        in: path
        required: true
      - name: maxId
        schema:
          type: integer
        in: path
        required: true
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/users/{userId}/exercises/{exerciseId}/maxes/{maxId}/archive':
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a MaxEffort object with the history filled in reflecting the new current max effort.
      security:
        - OAuth: []
      operationId: setUserMaxEffortArchived
      summary: "Archive Athlete's Max/PR Record for Exercise"
      description: Set specific max/pr record within an exercise as the active/working max for an athlete
      tags:
        - Maxes/PRs
    parameters:
      - name: userId
        schema:
          type: integer
        in: path
        required: true
      - name: maxId
        schema:
          type: integer
        in: path
        required: true
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/users/{userId}/exercises/{exerciseId}/maxes/reset':
    description: Resets all maximum efforts to not be marked as locked or current max effort for the user + exercise combination.
    put:
      responses:
        '204':
          description: Indicates the MaxEfforts have been reset succesfully.
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: resetUserExerciseMaxEfforts
      summary: "Reset All Athlete's Max/PR Records for Exercise"
      description: Resets all max/pr records associated with a specific exercise for an athlete. This will keep the data in their history but remove the active/working max.
      tags:
        - Maxes/PRs
    parameters:
      - name: userId
        schema:
          type: integer
        in: path
        required: true
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
      - name: exerciseId
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/users/{userId}/exercises/maxes':
    get:
      parameters:
        - name: type
          description: Filter the list of exercise max efforts by the type of exercise.
          schema:
            type: array
            items:
              type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxEffort'
          description: Returns a list of MaxEffort objects across all exercises the user has recorded a max effort in.
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: getUserMaxEfforts
      summary: "List of All User's Current Maxes/PRs"
      description: Return a list of all active maxes/prs for a specific user
      tags:
        - Maxes/PRs
    parameters:
      - name: userId
        schema:
          type: integer
        in: path
        required: true
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
  '/accounts/{accountCode}/documents/delete':
    parameters:
      - name: accountCode
        schema:
          type: integer
        in: path
        required: true
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentDelete'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUpdateResponse'
          description: success
      security:
        - OAuth:
            - 'urn:teambuildr:coach'
            - 'urn:teambuildr:admin'
      operationId: deleteDocument
      summary: Delete Documents
      description: Delete selected documents from the account
      tags:
        - Documents
components:
  schemas:
    UserSettings:
      title: UserSettings
      description: user specific settings for client applications
      type: object
      properties:
        athleteMaxes:
          format: int32
          description: this is an account setting that determines if an athlete can manually add maxes in the Maxes/PRs section
          type: integer
        coachEmails:
          format: int32
          description: user setting that determines if athlete should receieve emails sent from the coach
          type: integer
        dailyEmails:
          format: int32
          description: user setting that determines if athlete should receieve daily workout emails
          type: integer
        facebook:
          description: user item that shows facebook id if connected
          type: string
        feed:
          format: int32
          description: account setting that determines if the team feed for the account is enabled
          type: integer
        fistBumps:
          format: int32
          description: user setting that determines if the athlete wants to receieve fist bump notifications (not in use at the moment but will need to keep it)
          type: integer
        google:
          description: user item that shows facebook id if connected
          type: string
        intercomEnabled:
          format: int32
          description: user item that determines if Intercom should be loaded for the user. Right now it is only true for coaches.
          type: integer
        messaging:
          format: int32
          description: account setting that determines if the messaging for the account is enabled
          type: integer
        textMessages:
          format: int32
          description: user setting that determines if athlete should receieve text messages from the coaches
          type: integer
        timeZone:
          description: this is a user setting that is used to show the proper dates/times on the application. Right now I use the account timezone as the default and then override it if there is a value for the athlete.
          type: string
        twitter:
          description: user item that shows twitter id if connected
          type: string
        weight:
          description: 'account setting that determines if the weight is in Pounds (lbs) or Kilograms (kgs). Used for weight graph axis, headers for max/pr entry and text based workout reports'
          type: string
        workoutEmails:
          format: int32
          description: user setting that determines if athlete should receieve daily workout emails
          type: integer
        messagingContactButton:
          format: int32
          description: account settings that determines if a contact button should be shown on the Messaging page (can only be true if messaging is disabled as well)
          type: integer
        feedPrPosts:
          format: int32
          description: user setting that determines if new achieved Maxes/PRs should be automatically posted to the Feed
          type: integer
        wrvSupersetsEnabled:
          format: int32
          description: account setting that determines if supersets should be toggled in the weight room view module
          type: integer
    UserDevices:
      title: UserDevices
      description: Collection of devices a user may own
      type: object
      properties:
        fitbit:
          type: boolean
      example:
        fitbit: false
    UserMin:
      title: UserMin
      description: A minimal set of user data
      required:
        - id
        - email
      type: object
      properties:
        id:
          format: int32
          type: integer
        first:
          type: string
        last:
          type: string
        email:
          type: string
        pic:
          type: string
        admin:
          format: int32
          type: integer
      example:
        id: 340561
        first: Gordon
        last: Bombay
        email: gordon@teambuildr.com
        pic: 'https://s3.amazonaws.com/teambuildr-v2-prod-s3-assets-1x085q5whd0ap/pic/1527875309-340561.png'
        admin: 1
    ExerciseMin:
      title: Root Type for Exercise
      description: "The root of the Exercise type's schema."
      required:
        - id
        - name
        - type
      type: object
      properties:
        id:
          format: integer
          type: integer
        name:
          type: string
        type:
          type: string
        typeDescription:
          type: string
      example:
        id: 69170
        name: 1 Arm DB snatches
        type: L
        typeDescription: lift
    UserDetail:
      title: UserDetail
      required:
        - id
        - accountCode
        - email
        - isRegistered
      properties:
        id:
          format: integer
          description: user id
          type: integer
        accountCode:
          format: integer
          description: The team_code a user is associated with. This may become an array of accounts in the future.
          type: integer
        address:
          type: string
        admin:
          type: string
        birth:
          description: birthdate of user in format MM/dd/yyyy
          type: string
        email:
          type: string
        first:
          description: first name
          type: string
        gender:
          format: integer
          type: integer
        last:
          description: last name
          type: string
        organizationId:
          format: integer
          type: integer
        organizationName:
          type: string
        organizationStripe:
          type: string
        phone:
          type: string
        pic:
          type: string
        shirtSize:
          type: string
        stripeId:
          type: string
        userDevices:
          $ref: '#/components/schemas/UserDevices'
        userSettings:
          $ref: '#/components/schemas/UserSettings'
        userSkin:
          $ref: '#/components/schemas/UserSkin'
        userTimeZone:
          type: string
        isRegistered:
          description: ''
          type: boolean
        organizationSubscriptionId:
          description: subscription level id associated with organization
          type: integer
        organizationAccessLevel:
          description: Converted access level id based on organization subscription
          type: integer
        pinEnabled:
          description: ''
          type: boolean
    ExerciseDetail:
      title: Root Type for ExerciseDetail
      description: "The root of the ExerciseDetail type's schema."
      required:
        - id
        - type
        - typeDescription
      type: object
      properties:
        id:
          format: integer
          type: integer
        accountCode:
          format: integer
          type: integer
        description:
          type: string
        detail:
          type: string
        documentId:
          format: integer
          type: integer
        documentUrl:
          type: string
        inputType:
          description: "`Take from type_2 database field for 'C' and 'R' type`"
          type: string
        inputTypeDescription:
          type: string
        levels:
          format: integer
          type: integer
        linkedMaxExerciseId:
          format: integer
          description: ExerciseId to use for maximum tracking.
          type: integer
        linkedMaxPercentage:
          format: float
          description: The percentage the maximum is tracked.
          type: number
        msec:
          format: integer
          type: integer
        name:
          type: string
        tags:
          type: array
          items:
            type: integer
        track:
          format: integer
          type: integer
        type:
          type: string
        typeDescription:
          type: string
        unit:
          type: string
        unitAbbr:
          type: string
        unitName:
          type: string
        videoUrl:
          type: string
        distanceLength:
          description: 'Take from type_3 db field when type="R" && type_2="D"'
          type: string
        linkedExerciseName:
          description: Exercise Namw to use for maximum tracking.
          type: string
    RankPosition:
      title: Root Type for RankPosition
      description: A single leaderboard item.
      required:
        - rank
        - userId
        - userName
        - dateSet
        - displayValue
      type: object
      properties:
        changeDirection:
          format: integer
          description: |-
            The direction of the change:
             - `1` - UP - meaning better effort compared to historical value
             - `2` - DOWN - meaning worse effort compare to historical value

            All other values (or null) indicates no change.
          type: integer
        changeDisplayValue:
          description: A nice display of the change value
          type: string
        changeRawValue:
          format: integer
          description: The raw change amount
          type: integer
        dateSet:
          type: string
        displayValue:
          type: string
        exerciseId:
          type: integer
        exerciseName:
          type: string
        rank:
          format: integer
          type: integer
        rawValue:
          format: integer
          type: integer
        userId:
          format: integer
          type: integer
        userName:
          type: string
        userPic:
          type: string
    MaxHistoricalEffort:
      title: Root Type for MaxHistoricalEffort
      description: "The root of the MaxHistoricalEffort type's schema."
      type: object
      properties:
        dateSet:
          format: date
          type: string
        id:
          format: int32
          type: integer
        isCurrentMax:
          type: string
        rawValue:
          type: string
        value:
          type: string
    MaxEffort:
      title: Root Type for MaxEffirort
      description: "The root of the MaxEffirort type's schema."
      required:
        - exerciseId
      type: object
      properties:
        dateSet:
          format: date
          type: string
        exerciseId:
          type: integer
        exerciseName:
          type: string
        exerciseType:
          type: string
        goalColor:
          type: string
        goalRawValue:
          type: string
        goalValue:
          type: string
        goalPct:
          format: double
          type: number
        isLocked:
          type: boolean
        rawValue:
          type: string
        trackingMaxPct:
          type: integer
        trackingType:
          type: integer
        trackingTypeDescription:
          description: "Based upon the trackingType value: \n`1` - 1rp Max\n`2` - Highest # of Reps\n`3` - 3rp Max\n`4` - Highest Entered Weight"
          type: string
        unit:
          type: string
        unitAbbr:
          type: string
        unitName:
          type: string
        value:
          type: string
        history:
          description: When requesting the maximum history for an exercise a list of all maximum efforts are included in the object.
          type: array
          items:
            $ref: '#/components/schemas/MaxHistoricalEffort'
        trackingLinkExerName:
          type: string
        trackingLinkExerId:
          type: integer
    MaxEffortCreate:
      type: object
      properties:
        dateSet:
          format: date
          type: string
        rawValue:
          type: string
        reps:
          type: integer
        setCurrentMax:
          type: boolean
    Document:
      title: Root Type for Document
      description: "The root of the Document type's schema."
      type: object
      properties:
        id:
          format: integer
          type: integer
        type:
          format: integer
          type: integer
        typeDescription:
          type: string
        name:
          type: string
        description:
          type: string
        parentFolderId:
          format: integer
          type: integer
        url:
          type: string
        useExternalBrowser:
          type: boolean
        timeAdded:
          format: integer
          type: integer
        dateAdded:
          type: string
        globalAccess:
          type: boolean
        userGroupAccess:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
        editAllowed:
          type: boolean
      required:
        - id
        - type
        - typeDescription
        - name
        - dateAdded
        - globalAccess
    UserGroup:
      title: Root Type for UserGroup
      description: "The root of the UserGroup type's schema."
      type: object
      properties:
        id:
          format: integer
          type: integer
        name:
          type: string
    UserRegistrationRequest:
      description: ''
      required:
        - registrationType
        - accountCode
        - authenticationMethod
      type: object
      properties:
        registrationType:
          description: ''
          type: string
        accountCode:
          description: ''
          type: string
        easyJoinId:
          description: ''
          type: string
        userId:
          description: ''
          type: string
        authenticationMethod:
          description: ''
          type: string
        emailAddress:
          description: ''
          type: string
        password:
          description: ''
          type: string
        firstName:
          description: ''
          type: string
        lastName:
          description: ''
          type: string
        birth:
          description: ''
          type: string
        mobileNumber:
          description: ''
          type: string
        organizationName:
          description: ''
          type: string
        organizationType:
          description: ''
          type: string
    UserSkinExerciseColors:
      title: Root Type for UserSkinExerciseColors
      description: An object with key value pairs for exercise type color styles
      type: object
      properties:
        note:
          type: string
        warmup:
          type: string
        cooldown:
          type: string
        lift:
          type: string
        tag:
          type: string
        circuit:
          type: string
        cardio:
          type: string
        health:
          type: string
        science:
          type: string
        video:
          type: string
        rest:
          type: string
        break:
          type: string
        progression:
          type: string
      example:
        note: '#F9BF3B'
        warmup: '#D64541'
        cooldown: '#81CFE0'
        lift: '#6C7A89'
        tag: '#6C7A89'
        circuit: '#F89406'
        cardio: '#59ABE3'
        health: '#F64747'
        science: '#9b59b6'
        video: '#e74c3c'
        rest: '#16a085'
        break: '#34495e'
        progression: '#446CB3'
    UserSkinActionColors:
      title: Root Type for UserSkinActionColors
      description: An object with key value pairs for exercise actions (in list view) color styles
      type: object
      properties:
        add:
          type: string
        edit:
          type: string
        view:
          type: string
        complete:
          type: string
      example:
        add: '#2ecc71'
        edit: '#3498db'
        view: '#3498db'
        complete: '#27ae60'
    UserSkinEntryColors:
      title: Root Type for UserSkinEntryColors
      description: An object with key value pairs for exercise entry (when in entry view) color styles
      type: object
      properties:
        save:
          type: string
        journal:
          type: string
        video:
          type: string
        history:
          type: string
        document:
          type: string
        close:
          type: string
        optOut:
          type: string
      example:
        save: '#2dcc70'
        journal: '#f9bf3a'
        optOut: '#f9bf3a'
        video: '#d8534f'
        history: '#03c44f'
        document: '#a5a5a5'
        close: '#ff5844'
    UserSkinSupersetColors:
      title: Root Type for UserSkinSupersetColors
      description: An object with key value pairs for superset icon color styles
      type: object
      properties:
        A:
          type: string
        B:
          type: string
        C:
          type: string
        D:
          type: string
        E:
          type: string
        F:
          type: string
        G:
          type: string
        H:
          type: string
        I:
          type: string
        J:
          type: string
        K:
          type: string
        L:
          type: string
        M:
          type: string
        'N':
          type: string
        O:
          type: string
        P:
          type: string
        Q:
          type: string
        R:
          type: string
        S:
          type: string
        T:
          type: string
        U:
          type: string
        V:
          type: string
        W:
          type: string
        X:
          type: string
        'Y':
          type: string
        Z:
          type: string
      example:
        A: '#00d68b'
        B: '#0ab3cd'
        C: '#f36dab'
        D: '#f3ea6d'
        E: '#f3a96d'
        F: '#f3716d'
        G: '#6de1f3'
        H: '#c389f5'
        I: '#f5898b'
        J: '#00d68b'
        K: '#0ab3cd'
        L: '#f36dab'
        M: '#f3ea6d'
        'N': '#f3a96d'
        O: '#f3716d'
        P: '#6de1f3'
        Q: '#c389f5'
        R: '#f5898b'
        S: '#00d68b'
        T: '#0ab3cd'
        U: '#f36dab'
        V: '#f3ea6d'
        W: '#f3a96d'
        X: '#f3716d'
        'Y': '#6de1f3'
        Z: '#c389f5'
    UserSkin:
      title: UserSkin
      description: defines the look and feel of the client apps for the user
      type: object
      properties:
        accent:
          description: hex accent color
          type: string
        accentDarkTheme:
          description: indicates if the accent color is dark
          type: boolean
        background:
          description: hex background color - if blank use default color
          type: string
        darkTheme:
          description: indicates if the overall theme is dark
          type: boolean
        logo:
          description: url to team logo image
          type: string
        primary:
          description: hex primary color
          type: string
        secondary:
          description: hex secondary color
          type: string
        exerciseIconDarkTheme:
          description: indicates if the exercise icon theme is dark (icon will be white or black based on this)
          type: boolean
        exerciseIconInverted:
          description: 'indicates if the exercise icon background & outline needs be be inverted (if true, outline will be the exerciseColor & background will be white)'
          type: boolean
        exerciseStatusDarkTheme:
          description: indicates if the exercise status icon theme is dark (icon will be white or black based on this)
          type: boolean
        actionColors:
          $ref: '#/components/schemas/UserSkinActionColors'
        exerciseColors:
          $ref: '#/components/schemas/UserSkinExerciseColors'
        supersetColors:
          $ref: '#/components/schemas/UserSkinSupersetColors'
        entryColors:
          $ref: '#/components/schemas/UserSkinEntryColors'
    DocumentCreate:
      title: Root Type for DocumentCreate
      description: ''
      required:
        - itemType
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        groups:
          type: array
          items:
            format: int32
            type: integer
        filePath:
          type: string
        itemType:
          format: int32
          type: integer
        folderId:
          description: ''
          type: integer
        linkUrl:
          description: ''
          type: string
    DocumentUpload:
      title: Root Type for DocumentUpload
      description: ''
      required:
        - file
      type: object
      properties:
        file:
          format: binary
          description: ''
          type: string
    DocumentDelete:
      description: ''
      required:
        - documentIds
      type: object
      properties:
        documentIds:
          description: ''
          type: array
          items:
            type: integer
    BulkUpdateResponse:
      title: Root Type for BulkUpdateResponse
      description: ''
      type: object
      properties:
        successful:
          type: array
          items:
            format: int32
            type: integer
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      title: Root Type for ErrorDetail
      description: ''
      type: object
      properties:
        id:
          format: int32
          type: integer
        message:
          type: string
  securitySchemes:
    OAuth:
      flows:
        password:
          tokenUrl: 'https://localhost/oauth/token'
          refreshUrl: 'https://localhost/oauth/token'
          scopes:
            offline_access: Allow refresh token to be returned.
            'urn:teambuildr:me': Allows access to logged in user related endpoints.
            'urn:teambuildr:coach': Allow access to coach related api endpoints.
            'urn:teambuildr:admin': Allow access to admin related api ednpoints.
      type: oauth2
      description: Password Flow
servers:
  - url: 'https://api.teambuildr.com'
    description: Production
  - url: 'https://staging.api.teambuildr.com'
    description: Staging
